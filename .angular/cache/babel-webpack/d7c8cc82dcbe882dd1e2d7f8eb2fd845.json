{"ast":null,"code":"import _toConsumableArray from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { SegmentManagementService } from 'app/segment-management/segment-management.service';\nimport { UtilityServiceService } from 'app/utility-service.service';\nimport { DetailData, MasterData } from './Invoice';\nvar DataSchema = {\n  \"S/No\": \"SNo\",\n  'Item_Code': 'Item_Code',\n  'Item_Description': 'Item_Description',\n  'Qty': \"number\",\n  'Rate': \"number\",\n  'Discount_Percentage': \"number\",\n  'Discount_Amount': \"number\",\n  'Sales_Tax_Percentage': \"number\",\n  'Sales_Tax_Amount': \"number\",\n  'Value': \"number\",\n  'Net_Value': \"number\",\n  'isEdit': 'isEdit'\n};\n\nvar SaleInvoiceComponent = /*#__PURE__*/function () {\n  function SaleInvoiceComponent(utility, segmentManagementService, router, matDialog) {\n    _classCallCheck(this, SaleInvoiceComponent);\n\n    this.utility = utility;\n    this.segmentManagementService = segmentManagementService;\n    this.router = router;\n    this.matDialog = matDialog; // Btn\n\n    this.btnNew = true;\n    this.btnEdit = true;\n    this.btnDelete = false;\n    this.btnSave = false;\n    this.btnFind = true;\n    this.btnCancel = false;\n    this.btnLOV = false;\n    this.btnAttachBarcode = false;\n    this.btnBarcodePrint = false;\n    this.Locked = false;\n    this.ReadOnly = false;\n    this.filedlock = true; //Pagination\n\n    this.currentIndex = 0;\n    this.page = 1;\n    this.count = 0;\n    this.tableSize = 1;\n    this.tableSizes = [3, 6, 9, 12];\n    this.Index = 0;\n    this.ItemCode = '';\n    this.ItemDescription = ''; //Footer Master Value\n\n    this.Sales_Tax_Percentage = 0;\n    this.Sales_Tax_Amount = 0;\n    this.Discount_Percentage = 0;\n    this.Discount_Amount = 0;\n    this.TotalQuantity = 0;\n    this.TotalValue = 0;\n    this.Invoice_Amount = 0;\n    this.MasterData = new MasterData();\n    this.DetailData = new DetailData();\n    this.masterData = [];\n    this.detailData = [];\n    this.displayedColumns = [];\n    this.dataSchema = DataSchema;\n    this.CartColor = this.utility.ColorSechema();\n  }\n\n  _createClass(SaleInvoiceComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.LoadMaster();\n    }\n  }, {\n    key: \"onTableDataChange\",\n    value: function onTableDataChange(e) {\n      this.page = e;\n      this.Index = e - 1;\n\n      for (var i = 0; i < this.DataSource.length; i++) {\n        this.ItemCode = this.DataSource[this.Index].itemCode;\n        this.ItemDescription = this.DataSource[this.Index].itemDescription;\n      }\n    }\n  }, {\n    key: \"onTableSizeChange\",\n    value: function onTableSizeChange(event) {\n      this.tableSize = event.target.value;\n      this.page = 1;\n      this.Index = event - 1;\n    }\n  }, {\n    key: \"LoadMaster\",\n    value: function LoadMaster() {\n      this.BlankMaster();\n    }\n  }, {\n    key: \"BlankMaster\",\n    value: function BlankMaster() {\n      this.masterData.push({\n        Invoice_ID: 0,\n        Invoice_No: 0,\n        Invoice_Date: new Date(),\n        Transaction_Type: '',\n        Ware_House: '',\n        Saleman: '',\n        Customer_ID: 0,\n        Customer_Name: '',\n        Customer_Address: '',\n        Invoice_Amount: 0,\n        Freight_Amount: 0,\n        Refrence_No: '',\n        Remarks: '',\n        Posted: false,\n        Sales_Tax_Percentage: 0,\n        Sales_Tax_Amount: 0,\n        Discount_Percentage: 0,\n        Discount_Amount: 0\n      });\n      this.detailData.push({\n        Invoice_ID: 0,\n        Item_Code: '',\n        Item_Description: '',\n        Rate_Ent: 0,\n        Rate: 0,\n        Qty: 0,\n        Issue_Rate: 0,\n        Cost_Of_Sales: 0,\n        Discount_Percentage: 0,\n        Discount_Amount: 0,\n        Sales_Tax_Percentage: 0,\n        Sales_Tax_Amount: 0,\n        Value: 0,\n        Net_Value: 0\n      });\n      this.displayedColumns = [];\n      this.displayedColumns = [\"S/No\", 'Item_Code', 'Item_Description', 'Qty', 'Rate', 'Discount_Percentage', 'Discount_Amount', 'Sales_Tax_Percentage', 'Sales_Tax_Amount', 'Value', 'isEdit'];\n      this.Sales_Tax_Percentage = 0;\n      this.Sales_Tax_Amount = 0;\n      this.Discount_Percentage = 0;\n      this.Discount_Amount = 0;\n      this.TotalQuantity = 0;\n      this.TotalValue = 0;\n      this.Invoice_Amount = 0;\n    }\n  }, {\n    key: \"FindMaster\",\n    value: function FindMaster() {}\n  }, {\n    key: \"EditMaster\",\n    value: function EditMaster() {}\n  }, {\n    key: \"SaveMaster\",\n    value: function SaveMaster() {}\n  }, {\n    key: \"DeleteMaster\",\n    value: function DeleteMaster() {}\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      var newRow = {\n        id: Math.floor(Math.random() * 1000),\n        SNo: 0,\n        Item_Code: \"\",\n        Item_Description: \"\",\n        Qty: 0,\n        Rate: 0,\n        Discount_Percentage: 0,\n        Discount_Amount: 0,\n        Sales_Tax_Percentage: 0,\n        Sales_Tax_Amount: 0,\n        Value: 0,\n        isEdit: true\n      };\n      this.detailData = [newRow].concat(_toConsumableArray(this.detailData));\n      this.CountTotal();\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(id) {\n      this.detailData = this.detailData.filter(function (u) {\n        return u.id !== id;\n      });\n      this.CountTotal();\n    }\n  }, {\n    key: \"CountTotal\",\n    value: function CountTotal() {\n      this.TotalQuantity = 0;\n      this.Index = 0; // console.log(this.dataSource);\n\n      for (var i = 0; i < this.detailData.length; i++) {\n        // Conversion Must in Edit Mode Auto convert to string\n        this.TotalQuantity += this.TotalQuantity = parseInt(this.detailData[i].Qty.toString());\n        this.Sales_Tax_Amount += this.TotalQuantity = parseInt(this.detailData[i].Sales_Tax_Amount.toString());\n        this.Discount_Amount += this.TotalQuantity = parseInt(this.detailData[i].Discount_Amount.toString());\n        this.TotalValue += this.TotalQuantity = parseInt(this.detailData[i].Value.toString());\n        this.Index = i;\n      }\n    }\n  }, {\n    key: \"Close\",\n    value: function Close() {\n      this.reloadComponent();\n    }\n  }, {\n    key: \"reloadComponent\",\n    value: function reloadComponent() {\n      // let currentUrl = this.router.navigate([\"dashboard\"]); \n      this.router.routeReuseStrategy.shouldReuseRoute = function () {\n        return false;\n      };\n\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([\"dashboard\"]);\n    } // Button Setting\n\n  }, {\n    key: \"ButtonSave\",\n    value: function ButtonSave() {\n      this.btnDelete = false;\n      this.btnSave = false;\n      this.btnNew = true;\n      this.btnEdit = true;\n      this.btnFind = true;\n      this.btnCancel = true;\n      this.btnAttachBarcode = false;\n      this.btnBarcodePrint = true;\n      this.FieldLock();\n    }\n  }, {\n    key: \"ButtonEdit\",\n    value: function ButtonEdit() {\n      this.btnCancel = true;\n      this.btnSave = true;\n      this.filedlock = false;\n      this.btnNew = false;\n      this.btnEdit = false;\n      this.btnFind = false;\n      this.btnDelete = false;\n      this.btnAttachBarcode = true;\n      this.btnBarcodePrint = false;\n      this.utility.AddorEdit = \"Edit\";\n      this.FieldLock();\n    }\n  }, {\n    key: \"ButtonCancel\",\n    value: function ButtonCancel() {\n      this.btnCancel = false;\n      this.btnSave = false;\n      this.btnNew = true;\n      this.btnEdit = true;\n      this.btnFind = true;\n      this.btnDelete = true;\n      this.filedlock = true;\n      this.btnAttachBarcode = false;\n      this.btnBarcodePrint = true;\n      this.FieldLock();\n    }\n  }, {\n    key: \"ButtonNew\",\n    value: function ButtonNew() {\n      this.btnNew = false;\n      this.btnEdit = false;\n      this.filedlock = false;\n      this.btnDelete = false;\n      this.btnSave = true;\n      this.btnFind = false;\n      this.Locked = false;\n      this.btnLOV = false;\n      this.btnCancel = true;\n      this.btnAttachBarcode = true;\n      this.btnBarcodePrint = false;\n      this.utility.AddorEdit = \"Add\";\n      this.FieldLock();\n    }\n  }, {\n    key: \"FieldLock\",\n    value: function FieldLock() {\n      if (this.filedlock == true) {\n        this.Locked = true;\n        this.ReadOnly = true;\n      } else {\n        this.Locked = false;\n        this.ReadOnly = false;\n      }\n    }\n  }]);\n\n  return SaleInvoiceComponent;\n}();\n\nSaleInvoiceComponent = __decorate([Component({\n  selector: 'app-sale-invoice',\n  templateUrl: './sale-invoice.component.html',\n  styleUrls: ['./sale-invoice.component.scss']\n}), __metadata(\"design:paramtypes\", [UtilityServiceService, SegmentManagementService, Router, MatDialog])], SaleInvoiceComponent);\nexport { SaleInvoiceComponent };","map":null,"metadata":{},"sourceType":"module"}