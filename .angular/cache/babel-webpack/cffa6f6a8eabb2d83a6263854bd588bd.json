{"ast":null,"code":"import _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport var NumberValueDirective = /*#__PURE__*/(function () {\n  var NumberValueDirective = /*#__PURE__*/function () {\n    function NumberValueDirective(el) {\n      _classCallCheck(this, NumberValueDirective);\n\n      this.el = el; // Allow decimal numbers and negative values\n\n      this.regex = new RegExp(/^\\d*\\.?\\d{0,4}$/g); // Allow digit after Decimal Point\n      // Allow key codes for special events. Reflect :\n      // Backspace, tab, end, home\n\n      this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight', 'Del', 'Delete'];\n    }\n\n    _createClass(NumberValueDirective, [{\n      key: \"onKeyDown\",\n      value: function onKeyDown(event) {\n        console.log(this.el.nativeElement.value); // Allow Backspace, tab, end, and home keys\n\n        if (this.specialKeys.indexOf(event.key) !== -1) {\n          return;\n        }\n\n        var current = this.el.nativeElement.value;\n        var position = this.el.nativeElement.selectionStart;\n        var next = [current.slice(0, position), event.key == 'Decimal' ? '.' : event.key, current.slice(position)].join('');\n\n        if (next && !String(next).match(this.regex)) {\n          event.preventDefault();\n        }\n      }\n    }]);\n\n    return NumberValueDirective;\n  }();\n\n  NumberValueDirective.ɵfac = function NumberValueDirective_Factory(t) {\n    return new (t || NumberValueDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NumberValueDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NumberValueDirective,\n    selectors: [[\"\", \"appNumberValue\", \"\"]],\n    hostBindings: function NumberValueDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function NumberValueDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    }\n  });\n  return NumberValueDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}