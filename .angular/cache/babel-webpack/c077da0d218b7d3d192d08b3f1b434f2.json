{"ast":null,"code":"import _toConsumableArray from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { LOVComponent } from 'app/lov/lov/lov.component';\nimport { UtilityServiceService } from 'app/utility-service.service';\nimport { InventoryService } from '../inventory.service';\nvar DataSchema = {\n  \"S/No\": \"SNo\",\n  \"Barcode\": \"number\",\n  \"ItemCode\": \"itemCode\",\n  \"Description\": \"select\",\n  \"isEdit\": \"isEdit\"\n};\n\nvar AttachBarcodeComponent = /*#__PURE__*/function () {\n  function AttachBarcodeComponent(inv, utility, matDialog, router) {\n    _classCallCheck(this, AttachBarcodeComponent);\n\n    this.inv = inv;\n    this.utility = utility;\n    this.matDialog = matDialog;\n    this.router = router;\n    this.displayedColumns = [];\n    this.barcode = [];\n    this.dataSource = this.barcode;\n    this.dataSchema = DataSchema;\n    this.savemaster = [];\n    this.StartingNumber = 0;\n    this.TotalBarcode = 0;\n    this.SelectBarcode = '';\n    this.Index = 0;\n    this.counter = 0;\n    this.CartColor = this.utility.ColorSechema();\n  }\n\n  _createClass(AttachBarcodeComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.TotalNumberBarcode();\n      this.getItemsData();\n    }\n  }, {\n    key: \"getItemsData\",\n    value: function getItemsData() {\n      this.APIData = this.utility.ItemsObject;\n      this.displayedColumns = [];\n      this.barcode.push({\n        //  SNo:1,\n        'ItemCode': this.utility.ItemCode,\n        'Description': this.utility.ItemDescription,\n        Barcode: 1\n      });\n      this.displayedColumns = ['S/No', 'ItemCode', 'Description', 'Barcode', 'isEdit'];\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      var newRow = {\n        id: Math.floor(Math.random() * 1000),\n        SNo: 0,\n        Barcode: 0,\n        \"ItemCode\": \"\",\n        \"Description\": \"\",\n        isEdit: true\n      };\n      this.dataSource = [newRow].concat(_toConsumableArray(this.dataSource));\n      this.TotalNumberBarcode();\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(id) {\n      this.dataSource = this.dataSource.filter(function (u) {\n        return u.id !== id;\n      });\n      this.TotalNumberBarcode();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var _this = this;\n\n      this.TotalNumberBarcode();\n      var dialogRef = this.matDialog.open(LOVComponent, {\n        data: \"\",\n        width: '1000px'\n      });\n      dialogRef.afterClosed().subscribe(function (res) {\n        _this.LOVSource = res.data;\n\n        var getData = _this.dataSource.find(function (e) {\n          return e.Description == '';\n        }); //  getData['S/No'] = this.Index+1;\n\n\n        getData.Barcode = 0;\n        getData['ItemCode'] = _this.LOVSource.ItemCode;\n        getData.Description = _this.LOVSource.ItemDescription;\n      });\n    }\n  }, {\n    key: \"Close\",\n    value: function Close() {\n      this.reloadComponent();\n    }\n  }, {\n    key: \"BarcodePrint\",\n    value: function BarcodePrint() {\n      var obj = {};\n      this.counter = 0; // for(let i=0; i< this.dataSource.length;i++)\n      // {\n      //     this.counter += i;\n      //     //  const savedata = {\n      //     //   itemCode: this.dataSource[i]['Item Code'],\n      //     //   description: this.dataSource[i].Description,\n      //     //   barcode:this.dataSource[i].Barcode,\n      //     //   counter: this.counter,\n      //     // };\n      //     // this.SaveData = savedata; \n      //      this.savemaster.push(\n      //       {\n      //        'itemCode': this.dataSource[i]['Item Code'],\n      //        'description': this.dataSource[i].Description,\n      //         barcode:this.dataSource[i].Barcode,\n      //         counter: this.counter,\n      //       });\n      //       obj = {};\n      //       this.savemaster.forEach(item => obj['itemCode'] = item.itemCode);\n      //       this.savemaster.forEach(item => obj['description'] = item.description);\n      // }\n\n      var json = JSON.stringify(this.dataSource); // console.log(json)\n\n      this.inv.PrintBarcode(json).subscribe(function (data) {});\n    }\n  }, {\n    key: \"Back\",\n    value: function Back() {\n      this.router.navigate([\"items\"]);\n    }\n  }, {\n    key: \"reloadComponent\",\n    value: function reloadComponent() {\n      // let currentUrl = this.router.navigate([\"dashboard\"]); \n      //     this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n      //     this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([\"dashboard\"]);\n    }\n  }, {\n    key: \"TotalNumberBarcode\",\n    value: function TotalNumberBarcode() {\n      this.TotalBarcode = 0;\n      this.Index = 0; // console.log(this.dataSource);\n\n      for (var i = 0; i < this.dataSource.length; i++) {\n        // Conversion Must in Edit Mode Auto convert to string\n        this.TotalBarcode += this.TotalBarcode = parseInt(this.dataSource[i].Barcode.toString());\n        this.Index = i;\n      }\n    }\n  }]);\n\n  return AttachBarcodeComponent;\n}();\n\nAttachBarcodeComponent = __decorate([Component({\n  selector: 'app-attach-barcode',\n  templateUrl: './attach-barcode.component.html',\n  styleUrls: ['./attach-barcode.component.scss']\n}), __metadata(\"design:paramtypes\", [InventoryService, UtilityServiceService, MatDialog, Router])], AttachBarcodeComponent);\nexport { AttachBarcodeComponent };","map":null,"metadata":{},"sourceType":"module"}