{"ast":null,"code":"import _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var SegmentManagementService = /*#__PURE__*/(function () {\n  var SegmentManagementService = /*#__PURE__*/function () {\n    //baseURL =\"https://localhost:44304/\";\n    function SegmentManagementService(http) {\n      _classCallCheck(this, SegmentManagementService);\n\n      this.http = http;\n      this.baseURL = environment.baseURL;\n    } //Get Data\n\n\n    _createClass(SegmentManagementService, [{\n      key: \"GetValueSets\",\n      value: function GetValueSets() {\n        var httpOptions = {\n          headers: new HttpHeaders({\n            Authorization: \"bearer \".concat(sessionStorage.getItem(\"angularBearerToken\"))\n          })\n        }; // return this.http.get('https://localhost:44304/SegmentManagement/GetAllValueSets');\n\n        return this.http.get(this.baseURL + 'SegmentManagement/GetAllValueSets', httpOptions);\n      }\n    }, {\n      key: \"GetDataValueById\",\n      value: function GetDataValueById(data) {\n        return this.http.post(this.baseURL + 'SegmentManagement/GetDataValueById', data);\n      }\n    }, {\n      key: \"SaveDataValue\",\n      value: function SaveDataValue(savedatavalue) {\n        return this.http.post(this.baseURL + 'SegmentManagement/SubmitDataValue', savedatavalue);\n      }\n    }, {\n      key: \"DeleteDataValue\",\n      value: function DeleteDataValue(data) {\n        return this.http.post(this.baseURL + 'SegmentManagement/DeleteDataValue', data);\n      }\n    }]);\n\n    return SegmentManagementService;\n  }();\n\n  SegmentManagementService.ɵfac = function SegmentManagementService_Factory(t) {\n    return new (t || SegmentManagementService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SegmentManagementService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SegmentManagementService,\n    factory: SegmentManagementService.ɵfac,\n    providedIn: 'root'\n  });\n  return SegmentManagementService;\n})();","map":null,"metadata":{},"sourceType":"module"}