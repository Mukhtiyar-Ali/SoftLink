{"ast":null,"code":"import _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, ElementRef, HostListener } from '@angular/core';\n\nvar NumericDirective = /*#__PURE__*/function () {\n  function NumericDirective(el) {\n    _classCallCheck(this, NumericDirective);\n\n    this.el = el; // Allow decimal numbers and negative values\n\n    this.regex = new RegExp(/^\\d*\\.?\\d{0,2}$/g); // Allow key codes for special events. Reflect :\n    // Backspace, tab, end, home\n\n    this.specialKeys = ['Backspace', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight', 'Del', 'Delete'];\n  }\n\n  _createClass(NumericDirective, [{\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      console.log(this.el.nativeElement.value); // Allow Backspace, tab, end, and home keys\n\n      if (this.specialKeys.indexOf(event.key) !== -1) {\n        return;\n      }\n\n      var current = this.el.nativeElement.value;\n      var position = this.el.nativeElement.selectionStart;\n      var next = [current.slice(0, position), event.key == 'Decimal' ? '.' : event.key, current.slice(position)].join('');\n\n      if (next && !String(next).match(this.regex)) {\n        event.preventDefault();\n      }\n    }\n  }]);\n\n  return NumericDirective;\n}();\n\n__decorate([HostListener('keydown', ['$event']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [KeyboardEvent]), __metadata(\"design:returntype\", void 0)], NumericDirective.prototype, \"onKeyDown\", null);\n\nNumericDirective = __decorate([Directive({\n  selector: '[appNumeric]'\n}), __metadata(\"design:paramtypes\", [ElementRef])], NumericDirective);\nexport { NumericDirective };","map":null,"metadata":{},"sourceType":"module"}