{"ast":null,"code":"import _classCallCheck from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"D:/SoftLink/Web Applictions/Standard Trading/Soft Link/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n/**\r\n * DevExtreme (esm/renovation/ui/common/widget.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"_feedbackHideTimeout\", \"_feedbackShowTimeout\", \"accessKey\", \"activeStateEnabled\", \"activeStateUnit\", \"addWidgetClass\", \"aria\", \"children\", \"className\", \"classes\", \"cssText\", \"disabled\", \"focusStateEnabled\", \"height\", \"hint\", \"hoverStateEnabled\", \"name\", \"onActive\", \"onClick\", \"onDimensionChanged\", \"onFocusIn\", \"onFocusOut\", \"onHoverEnd\", \"onHoverStart\", \"onInactive\", \"onKeyDown\", \"onRootElementRendered\", \"onVisibilityChange\", \"rootElementRef\", \"rtlEnabled\", \"tabIndex\", \"visible\", \"width\"];\nimport { createVNode, createComponentVNode, normalizeProps } from \"inferno\";\nimport { InfernoEffect, InfernoWrapperComponent, normalizeStyles } from \"@devextreme/runtime/inferno\";\nimport \"../../../events/click\";\nimport \"../../../events/hover\";\nimport { isFunction } from \"../../../core/utils/type\";\nimport { active, dxClick, focus as _focus, hover, keyboard, resize, visibility } from \"../../../events/short\";\nimport { combineClasses } from \"../../utils/combine_classes\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { focusable } from \"../../../ui/widget/selectors\";\nimport { normalizeStyleProp } from \"../../../core/utils/style\";\nimport { BaseWidgetProps } from \"./base_props\";\nimport { ConfigContext } from \"../../common/config_context\";\nimport { ConfigProvider } from \"../../common/config_provider\";\nimport { resolveRtlEnabled, resolveRtlEnabledDefinition } from \"../../utils/resolve_rtl\";\nimport resizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport errors from \"../../../core/errors\";\nimport domAdapter from \"../../../core/dom_adapter\";\nvar DEFAULT_FEEDBACK_HIDE_TIMEOUT = 400;\nvar DEFAULT_FEEDBACK_SHOW_TIMEOUT = 30;\n\nvar getAria = function getAria(args) {\n  return Object.keys(args).reduce(function (r, key) {\n    if (args[key]) {\n      return _extends({}, r, _defineProperty({}, \"role\" === key || \"id\" === key ? key : \"aria-\".concat(key), String(args[key])));\n    }\n\n    return r;\n  }, {});\n};\n\nexport var viewFunction = function viewFunction(viewModel) {\n  var widget = normalizeProps(createVNode(1, \"div\", viewModel.cssClasses, viewModel.props.children, 0, _extends({}, viewModel.attributes, {\n    tabIndex: viewModel.tabIndex,\n    title: viewModel.props.hint,\n    hidden: !viewModel.props.visible,\n    style: normalizeStyles(viewModel.styles)\n  }), null, viewModel.widgetElementRef));\n  return viewModel.shouldRenderConfigProvider ? createComponentVNode(2, ConfigProvider, {\n    rtlEnabled: viewModel.rtlEnabled,\n    children: widget\n  }) : widget;\n};\nexport var WidgetProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({\n  _feedbackHideTimeout: DEFAULT_FEEDBACK_HIDE_TIMEOUT,\n  _feedbackShowTimeout: DEFAULT_FEEDBACK_SHOW_TIMEOUT,\n  cssText: \"\",\n\n  get aria() {\n    return {};\n  },\n\n  classes: \"\",\n  name: \"\",\n  addWidgetClass: true\n})));\nimport { createReRenderEffect } from \"@devextreme/runtime/inferno\";\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport var Widget = /*#__PURE__*/(function () {\n  var Widget = /*#__PURE__*/function (_InfernoWrapperCompon) {\n    _inherits(Widget, _InfernoWrapperCompon);\n\n    var _super = _createSuper(Widget);\n\n    function Widget(props) {\n      var _this;\n\n      _classCallCheck(this, Widget);\n\n      _this = _super.call(this, props);\n      _this.widgetElementRef = infernoCreateRef();\n      _this.state = {\n        active: false,\n        focused: false,\n        hovered: false\n      };\n      _this.setRootElementRef = _this.setRootElementRef.bind(_assertThisInitialized(_this));\n      _this.activeEffect = _this.activeEffect.bind(_assertThisInitialized(_this));\n      _this.clickEffect = _this.clickEffect.bind(_assertThisInitialized(_this));\n      _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n      _this.blur = _this.blur.bind(_assertThisInitialized(_this));\n      _this.activate = _this.activate.bind(_assertThisInitialized(_this));\n      _this.deactivate = _this.deactivate.bind(_assertThisInitialized(_this));\n      _this.focusEffect = _this.focusEffect.bind(_assertThisInitialized(_this));\n      _this.hoverEffect = _this.hoverEffect.bind(_assertThisInitialized(_this));\n      _this.keyboardEffect = _this.keyboardEffect.bind(_assertThisInitialized(_this));\n      _this.resizeEffect = _this.resizeEffect.bind(_assertThisInitialized(_this));\n      _this.windowResizeEffect = _this.windowResizeEffect.bind(_assertThisInitialized(_this));\n      _this.visibilityEffect = _this.visibilityEffect.bind(_assertThisInitialized(_this));\n      _this.checkDeprecation = _this.checkDeprecation.bind(_assertThisInitialized(_this));\n      _this.applyCssTextEffect = _this.applyCssTextEffect.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    _createClass(Widget, [{\n      key: \"config\",\n      get: function get() {\n        if (\"ConfigContext\" in this.context) {\n          return this.context.ConfigContext;\n        }\n\n        return ConfigContext;\n      }\n    }, {\n      key: \"createEffects\",\n      value: function createEffects() {\n        return [new InfernoEffect(this.setRootElementRef, []), new InfernoEffect(this.activeEffect, [this.props._feedbackHideTimeout, this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive, this.props.onInactive]), new InfernoEffect(this.clickEffect, [this.props.disabled, this.props.name, this.props.onClick]), new InfernoEffect(this.focusEffect, [this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn, this.props.onFocusOut]), new InfernoEffect(this.hoverEffect, [this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverEnd, this.props.onHoverStart, this.state.active]), new InfernoEffect(this.keyboardEffect, [this.props.focusStateEnabled, this.props.onKeyDown]), new InfernoEffect(this.resizeEffect, [this.props.name, this.props.onDimensionChanged]), new InfernoEffect(this.windowResizeEffect, [this.props.onDimensionChanged]), new InfernoEffect(this.visibilityEffect, [this.props.name, this.props.onVisibilityChange]), new InfernoEffect(this.checkDeprecation, [this.props.height, this.props.width]), new InfernoEffect(this.applyCssTextEffect, [this.props.cssText]), createReRenderEffect()];\n      }\n    }, {\n      key: \"updateEffects\",\n      value: function updateEffects() {\n        var _this$_effects$, _this$_effects$2, _this$_effects$3, _this$_effects$4, _this$_effects$5, _this$_effects$6, _this$_effects$7, _this$_effects$8, _this$_effects$9, _this$_effects$10;\n\n        null === (_this$_effects$ = this._effects[1]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props._feedbackHideTimeout, this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive, this.props.onInactive]);\n        null === (_this$_effects$2 = this._effects[2]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props.disabled, this.props.name, this.props.onClick]);\n        null === (_this$_effects$3 = this._effects[3]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn, this.props.onFocusOut]);\n        null === (_this$_effects$4 = this._effects[4]) || void 0 === _this$_effects$4 ? void 0 : _this$_effects$4.update([this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverEnd, this.props.onHoverStart, this.state.active]);\n        null === (_this$_effects$5 = this._effects[5]) || void 0 === _this$_effects$5 ? void 0 : _this$_effects$5.update([this.props.focusStateEnabled, this.props.onKeyDown]);\n        null === (_this$_effects$6 = this._effects[6]) || void 0 === _this$_effects$6 ? void 0 : _this$_effects$6.update([this.props.name, this.props.onDimensionChanged]);\n        null === (_this$_effects$7 = this._effects[7]) || void 0 === _this$_effects$7 ? void 0 : _this$_effects$7.update([this.props.onDimensionChanged]);\n        null === (_this$_effects$8 = this._effects[8]) || void 0 === _this$_effects$8 ? void 0 : _this$_effects$8.update([this.props.name, this.props.onVisibilityChange]);\n        null === (_this$_effects$9 = this._effects[9]) || void 0 === _this$_effects$9 ? void 0 : _this$_effects$9.update([this.props.height, this.props.width]);\n        null === (_this$_effects$10 = this._effects[10]) || void 0 === _this$_effects$10 ? void 0 : _this$_effects$10.update([this.props.cssText]);\n      }\n    }, {\n      key: \"setRootElementRef\",\n      value: function setRootElementRef() {\n        var _this$props2 = this.props,\n            onRootElementRendered = _this$props2.onRootElementRendered,\n            rootElementRef = _this$props2.rootElementRef;\n\n        if (rootElementRef) {\n          rootElementRef.current = this.widgetElementRef.current;\n        }\n\n        null === onRootElementRendered || void 0 === onRootElementRendered ? void 0 : onRootElementRendered(this.widgetElementRef.current);\n      }\n    }, {\n      key: \"activeEffect\",\n      value: function activeEffect() {\n        var _this2 = this;\n\n        var _this$props3 = this.props,\n            _feedbackHideTimeout = _this$props3._feedbackHideTimeout,\n            _feedbackShowTimeout = _this$props3._feedbackShowTimeout,\n            activeStateEnabled = _this$props3.activeStateEnabled,\n            activeStateUnit = _this$props3.activeStateUnit,\n            disabled = _this$props3.disabled,\n            onActive = _this$props3.onActive,\n            onInactive = _this$props3.onInactive;\n        var selector = activeStateUnit;\n\n        if (activeStateEnabled && !disabled) {\n          active.on(this.widgetElementRef.current, function (_ref) {\n            var event = _ref.event;\n\n            _this2.setState(function (__state_argument) {\n              return {\n                active: true\n              };\n            });\n\n            null === onActive || void 0 === onActive ? void 0 : onActive(event);\n          }, function (_ref2) {\n            var event = _ref2.event;\n\n            _this2.setState(function (__state_argument) {\n              return {\n                active: false\n              };\n            });\n\n            null === onInactive || void 0 === onInactive ? void 0 : onInactive(event);\n          }, {\n            hideTimeout: _feedbackHideTimeout,\n            namespace: \"UIFeedback\",\n            selector: selector,\n            showTimeout: _feedbackShowTimeout\n          });\n          return function () {\n            return active.off(_this2.widgetElementRef.current, {\n              selector: selector,\n              namespace: \"UIFeedback\"\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"clickEffect\",\n      value: function clickEffect() {\n        var _this3 = this;\n\n        var _this$props4 = this.props,\n            disabled = _this$props4.disabled,\n            name = _this$props4.name,\n            onClick = _this$props4.onClick;\n        var namespace = name;\n\n        if (onClick && !disabled) {\n          dxClick.on(this.widgetElementRef.current, onClick, {\n            namespace: namespace\n          });\n          return function () {\n            return dxClick.off(_this3.widgetElementRef.current, {\n              namespace: namespace\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"focusEffect\",\n      value: function focusEffect() {\n        var _this4 = this;\n\n        var _this$props5 = this.props,\n            disabled = _this$props5.disabled,\n            focusStateEnabled = _this$props5.focusStateEnabled,\n            name = _this$props5.name,\n            onFocusIn = _this$props5.onFocusIn,\n            onFocusOut = _this$props5.onFocusOut;\n        var namespace = \"\".concat(name, \"Focus\");\n        var isFocusable = focusStateEnabled && !disabled;\n\n        if (isFocusable) {\n          _focus.on(this.widgetElementRef.current, function (e) {\n            if (!e.isDefaultPrevented()) {\n              _this4.setState(function (__state_argument) {\n                return {\n                  focused: true\n                };\n              });\n\n              null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(e);\n            }\n          }, function (e) {\n            if (!e.isDefaultPrevented()) {\n              _this4.setState(function (__state_argument) {\n                return {\n                  focused: false\n                };\n              });\n\n              null === onFocusOut || void 0 === onFocusOut ? void 0 : onFocusOut(e);\n            }\n          }, {\n            isFocusable: focusable,\n            namespace: namespace\n          });\n\n          return function () {\n            return _focus.off(_this4.widgetElementRef.current, {\n              namespace: namespace\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"hoverEffect\",\n      value: function hoverEffect() {\n        var _this5 = this;\n\n        var _this$props6 = this.props,\n            activeStateUnit = _this$props6.activeStateUnit,\n            disabled = _this$props6.disabled,\n            hoverStateEnabled = _this$props6.hoverStateEnabled,\n            onHoverEnd = _this$props6.onHoverEnd,\n            onHoverStart = _this$props6.onHoverStart;\n        var selector = activeStateUnit;\n        var isHoverable = hoverStateEnabled && !disabled;\n\n        if (isHoverable) {\n          hover.on(this.widgetElementRef.current, function (_ref3) {\n            var event = _ref3.event;\n            !_this5.state.active && _this5.setState(function (__state_argument) {\n              return {\n                hovered: true\n              };\n            });\n            null === onHoverStart || void 0 === onHoverStart ? void 0 : onHoverStart(event);\n          }, function (event) {\n            _this5.setState(function (__state_argument) {\n              return {\n                hovered: false\n              };\n            });\n\n            null === onHoverEnd || void 0 === onHoverEnd ? void 0 : onHoverEnd(event);\n          }, {\n            selector: selector,\n            namespace: \"UIFeedback\"\n          });\n          return function () {\n            return hover.off(_this5.widgetElementRef.current, {\n              selector: selector,\n              namespace: \"UIFeedback\"\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"keyboardEffect\",\n      value: function keyboardEffect() {\n        var _this$props7 = this.props,\n            focusStateEnabled = _this$props7.focusStateEnabled,\n            onKeyDown = _this$props7.onKeyDown;\n\n        if (focusStateEnabled && onKeyDown) {\n          var id = keyboard.on(this.widgetElementRef.current, this.widgetElementRef.current, function (e) {\n            return onKeyDown(e);\n          });\n          return function () {\n            return keyboard.off(id);\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"resizeEffect\",\n      value: function resizeEffect() {\n        var _this6 = this;\n\n        var namespace = \"\".concat(this.props.name, \"VisibilityChange\");\n        var onDimensionChanged = this.props.onDimensionChanged;\n\n        if (onDimensionChanged) {\n          resize.on(this.widgetElementRef.current, onDimensionChanged, {\n            namespace: namespace\n          });\n          return function () {\n            return resize.off(_this6.widgetElementRef.current, {\n              namespace: namespace\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"windowResizeEffect\",\n      value: function windowResizeEffect() {\n        var onDimensionChanged = this.props.onDimensionChanged;\n\n        if (onDimensionChanged) {\n          resizeCallbacks.add(onDimensionChanged);\n          return function () {\n            resizeCallbacks.remove(onDimensionChanged);\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"visibilityEffect\",\n      value: function visibilityEffect() {\n        var _this7 = this;\n\n        var _this$props8 = this.props,\n            name = _this$props8.name,\n            onVisibilityChange = _this$props8.onVisibilityChange;\n        var namespace = \"\".concat(name, \"VisibilityChange\");\n\n        if (onVisibilityChange) {\n          visibility.on(this.widgetElementRef.current, function () {\n            return onVisibilityChange(true);\n          }, function () {\n            return onVisibilityChange(false);\n          }, {\n            namespace: namespace\n          });\n          return function () {\n            return visibility.off(_this7.widgetElementRef.current, {\n              namespace: namespace\n            });\n          };\n        }\n\n        return;\n      }\n    }, {\n      key: \"checkDeprecation\",\n      value: function checkDeprecation() {\n        var _this$props9 = this.props,\n            height = _this$props9.height,\n            width = _this$props9.width;\n\n        if (isFunction(width)) {\n          errors.log(\"W0017\", \"width\");\n        }\n\n        if (isFunction(height)) {\n          errors.log(\"W0017\", \"height\");\n        }\n      }\n    }, {\n      key: \"applyCssTextEffect\",\n      value: function applyCssTextEffect() {\n        var cssText = this.props.cssText;\n\n        if (\"\" !== cssText) {\n          this.widgetElementRef.current.style.cssText = cssText;\n        }\n      }\n    }, {\n      key: \"shouldRenderConfigProvider\",\n      get: function get() {\n        var rtlEnabled = this.props.rtlEnabled;\n        return resolveRtlEnabledDefinition(rtlEnabled, this.config);\n      }\n    }, {\n      key: \"rtlEnabled\",\n      get: function get() {\n        var rtlEnabled = this.props.rtlEnabled;\n        return resolveRtlEnabled(rtlEnabled, this.config);\n      }\n    }, {\n      key: \"attributes\",\n      get: function get() {\n        var _this$props10 = this.props,\n            aria = _this$props10.aria,\n            disabled = _this$props10.disabled,\n            focusStateEnabled = _this$props10.focusStateEnabled,\n            visible = _this$props10.visible;\n        var accessKey = focusStateEnabled && !disabled && this.props.accessKey;\n        return _extends({}, extend({}, this.restAttributes, accessKey && {\n          accessKey: accessKey\n        }), getAria(_extends({}, aria, {\n          disabled: disabled,\n          hidden: !visible\n        })));\n      }\n    }, {\n      key: \"styles\",\n      get: function get() {\n        var _this$props11 = this.props,\n            height = _this$props11.height,\n            width = _this$props11.width;\n        var style = this.restAttributes.style || {};\n        var computedWidth = normalizeStyleProp(\"width\", isFunction(width) ? width() : width);\n        var computedHeight = normalizeStyleProp(\"height\", isFunction(height) ? height() : height);\n        return _extends({}, style, {\n          height: null !== computedHeight && void 0 !== computedHeight ? computedHeight : style.height,\n          width: null !== computedWidth && void 0 !== computedWidth ? computedWidth : style.width\n        });\n      }\n    }, {\n      key: \"cssClasses\",\n      get: function get() {\n        var _classesMap;\n\n        var _this$props12 = this.props,\n            activeStateEnabled = _this$props12.activeStateEnabled,\n            addWidgetClass = _this$props12.addWidgetClass,\n            className = _this$props12.className,\n            classes = _this$props12.classes,\n            disabled = _this$props12.disabled,\n            focusStateEnabled = _this$props12.focusStateEnabled,\n            hoverStateEnabled = _this$props12.hoverStateEnabled,\n            onVisibilityChange = _this$props12.onVisibilityChange,\n            visible = _this$props12.visible;\n        var isFocusable = !!focusStateEnabled && !disabled;\n        var isHoverable = !!hoverStateEnabled && !disabled;\n        var canBeActive = !!activeStateEnabled && !disabled;\n        var classesMap = (_classesMap = {\n          \"dx-widget\": !!addWidgetClass\n        }, _defineProperty(_classesMap, String(classes), !!classes), _defineProperty(_classesMap, String(className), !!className), _defineProperty(_classesMap, \"dx-state-disabled\", !!disabled), _defineProperty(_classesMap, \"dx-state-invisible\", !visible), _defineProperty(_classesMap, \"dx-state-focused\", !!this.state.focused && isFocusable), _defineProperty(_classesMap, \"dx-state-active\", !!this.state.active && canBeActive), _defineProperty(_classesMap, \"dx-state-hover\", !!this.state.hovered && isHoverable && !this.state.active), _defineProperty(_classesMap, \"dx-rtl\", !!this.rtlEnabled), _defineProperty(_classesMap, \"dx-visibility-change-handler\", !!onVisibilityChange), _classesMap);\n        return combineClasses(classesMap);\n      }\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        var _this$props13 = this.props,\n            disabled = _this$props13.disabled,\n            focusStateEnabled = _this$props13.focusStateEnabled,\n            tabIndex = _this$props13.tabIndex;\n        var isFocusable = focusStateEnabled && !disabled;\n        return isFocusable ? tabIndex : void 0;\n      }\n    }, {\n      key: \"restAttributes\",\n      get: function get() {\n        var _this$props = this.props,\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n        return restProps;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        _focus.trigger(this.widgetElementRef.current);\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        var activeElement = domAdapter.getActiveElement();\n\n        if (this.widgetElementRef.current === activeElement) {\n          activeElement.blur();\n        }\n      }\n    }, {\n      key: \"activate\",\n      value: function activate() {\n        this.setState(function (__state_argument) {\n          return {\n            active: true\n          };\n        });\n      }\n    }, {\n      key: \"deactivate\",\n      value: function deactivate() {\n        this.setState(function (__state_argument) {\n          return {\n            active: false\n          };\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this.props;\n        return viewFunction({\n          props: _extends({}, props),\n          active: this.state.active,\n          focused: this.state.focused,\n          hovered: this.state.hovered,\n          widgetElementRef: this.widgetElementRef,\n          config: this.config,\n          shouldRenderConfigProvider: this.shouldRenderConfigProvider,\n          rtlEnabled: this.rtlEnabled,\n          attributes: this.attributes,\n          styles: this.styles,\n          cssClasses: this.cssClasses,\n          tabIndex: this.tabIndex,\n          restAttributes: this.restAttributes\n        });\n      }\n    }]);\n\n    return Widget;\n  }(InfernoWrapperComponent);\n\n  Widget.defaultProps = WidgetProps;\n  return Widget;\n})();","map":null,"metadata":{},"sourceType":"module"}